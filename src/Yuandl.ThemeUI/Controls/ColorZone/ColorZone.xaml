<!--
    This Source Code Form is subject to the terms of the MIT License.
    If a copy of the MIT was not distributed with this file, You can obtain one at https://opensource.org/licenses/MIT.
    Copyright (C) Yuandl ThemeUI. All Rights Reserved.
-->
<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Yuandl.ThemeUI.Controls"
    xmlns:converters="clr-namespace:Yuandl.ThemeUI.Converters"
    xmlns:assist="clr-namespace:Yuandl.ThemeUI.ElementAssist">

    <converters:ShadowOpacityMaskConverter x:Key="ShadowOpacityMaskConverter" />

    <Style TargetType="{x:Type controls:ColorZone}">
        <Setter Property="Background" Value="{DynamicResource ControlFillColorBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource ControlTextColorBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderColorBrush}" />
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ColorZone}">
                    <Grid Background="Transparent">
                        <Grid.OpacityMask>
                            <MultiBinding Converter="{StaticResource ShadowOpacityMaskConverter}">
                                <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="(assist:ElevationAssist.Elevation)" RelativeSource="{RelativeSource TemplatedParent}" />
                            </MultiBinding>
                        </Grid.OpacityMask>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(assist:ShadowAssist.CacheMode)}">
                            <Border  x:Name="AdornerDecorator"
                                Background="{TemplateBinding Background}"
                                CornerRadius="{TemplateBinding CornerRadius}"
                                Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(assist:ElevationAssist.Elevation), Converter={x:Static converters:ShadowConverter.Instance}}" />
                        </AdornerDecorator>
                        <Border x:Name="rootborder" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            ClipToBounds="{TemplateBinding ClipToBounds}"
                            CornerRadius="{TemplateBinding CornerRadius}">
                            <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Cursor="{TemplateBinding Cursor}"
                                RecognizesAccessKey="True"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--  TRANSPARENT  -->
                        <Trigger Property="Appearance" Value="Transparent">
                            <Setter Property="Background" Value="Transparent" />
                        </Trigger>

                        <!--  PRIMARY  -->
                        <Trigger Property="Appearance" Value="Primary">
                            <Setter Property="Background" Value="{DynamicResource SystemAccentColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
                            <Setter TargetName="rootborder" Property="Background" Value="{DynamicResource SystemAccentColorBrush}" />
                            <Setter TargetName="rootborder" Property="TextElement.Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
                        </Trigger>

                        <!--  DARK  -->
                        <Trigger Property="Appearance" Value="Warning">
                            <Setter Property="Background" Value="{DynamicResource SystemWarningTextColorBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
                        </Trigger>

                        <!--  INFO  -->
                        <Trigger Property="Appearance" Value="Info">
                            <Setter Property="Background" Value="{DynamicResource SystemInfoTextColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
                        </Trigger>

                        <!--  DANGER  -->
                        <Trigger Property="Appearance" Value="Error">
                            <Setter Property="Background" Value="{DynamicResource SystemErrorTextColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
                        </Trigger>

                        <!--  SUCCESS  -->
                        <Trigger Property="Appearance" Value="Success">
                            <Setter Property="Background" Value="{DynamicResource SystemSuccessTextColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />


    </Style>
</ResourceDictionary>