<!--
    This Source Code Form is subject to the terms of the MIT License.
    If a copy of the MIT was not distributed with this file, You can obtain one at https://opensource.org/licenses/MIT.
    Copyright (C) Yuandl ThemeUI. All Rights Reserved.
-->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Yuandl.ThemeUI.Controls"
    xmlns:converters="clr-namespace:Yuandl.ThemeUI.Converters"
    xmlns:system="clr-namespace:System;assembly=mscorlib">

    <Thickness x:Key="ButtonPadding">16,6,16,6</Thickness>
    <Thickness x:Key="ButtonBorderThemeThickness">1</Thickness>
    <Thickness x:Key="ButtonIconMargin">0,0,8,0</Thickness>
    <system:Double x:Key="DefaultControlHeight">28</system:Double>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:BorderClipConverter x:Key="BorderClipConverter" />

    <Style x:Key="DefaultTagStyle" TargetType="controls:Tag">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />
        <Setter Property="Background" Value="{DynamicResource ControlFillColorBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource ControlTextColorBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource ButtonBorderThemeThickness}" />
        <Setter Property="Padding" Value="{StaticResource ButtonPadding}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="CornerRadius" Value="15" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="ShowCloseButton" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:Tag">
                    <Border 
                        CornerRadius="{TemplateBinding CornerRadius}"
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}" 
                        SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Border 
                                CornerRadius="{TemplateBinding CornerRadius}"
                                Visibility="{Binding HasHeader,RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" 
                                Width="{Binding ActualHeight,RelativeSource={RelativeSource Self}}" 
                                BorderBrush="{Binding BorderBrush,RelativeSource={RelativeSource TemplatedParent}}" 
                                Background="{Binding Background,RelativeSource={RelativeSource TemplatedParent}}">
                                <Border.Clip>
                                    <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                        <Binding Path="CornerRadius" RelativeSource="{RelativeSource Self}" />
                                    </MultiBinding>
                                </Border.Clip>

                                <ContentPresenter 
                                    TextElement.Foreground="{Binding Foreground,RelativeSource={RelativeSource TemplatedParent}}" 
                                    ContentSource="Header" 
                                    ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                    ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                    ContentStringFormat="{TemplateBinding HeaderStringFormat}" 
                                    VerticalAlignment="Center" 
                                    HorizontalAlignment="Center" />
                            </Border>
                            <ContentPresenter 
                                Margin="{TemplateBinding Padding}" Grid.Column="1" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Button 
                                Focusable="False" 
                                x:Name="ButtonClose" 
                                Padding="0" 
                                Cursor="Hand"
                                BorderThickness="0" 
                                Background="Transparent"
                                Visibility="{TemplateBinding ShowCloseButton,Converter={StaticResource BooleanToVisibilityConverter}}" 
                                Command="{Binding Path=TemplateButtonCommand, Mode=OneTime, RelativeSource={RelativeSource AncestorType={x:Type controls:Tag}}}"
                                CommandParameter="{Binding Path=.,RelativeSource={RelativeSource TemplatedParent}}"
                                Margin="0,0,6,0" 
                                Width="16" 
                                Height="16" 
                                Grid.Column="2" 
                                >
                                <controls:SymbolIcon Symbol="Dismiss24" Foreground="{TemplateBinding Foreground}" FontSize="13"/>
                            </Button>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Appearance" Value="Primary">
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
                            <Setter Property="Background" Value="{DynamicResource SystemAccentSecondaryColorBrush}" />
                        </Trigger>
                        <Trigger Property="Appearance" Value="Info">
                            <Setter Property="Foreground" Value="{DynamicResource SystemInfoTextColorBrush}" />
                            <Setter Property="Background" Value="{DynamicResource SystemInfoFillColorBrush}" />
                        </Trigger>
                        <Trigger Property="Appearance" Value="Success">
                            <Setter Property="Foreground" Value="{DynamicResource SystemSuccessTextColorBrush}" />
                            <Setter Property="Background" Value="{DynamicResource SystemSuccessFillColorBrush}" />
                        </Trigger>
                        <Trigger Property="Appearance" Value="Warning">
                            <Setter Property="Foreground" Value="{DynamicResource SystemWarningTextColorBrush}" />
                            <Setter Property="Background" Value="{DynamicResource SystemWarningFillColorBrush}" />
                        </Trigger>
                        <Trigger Property="Appearance" Value="Error">
                            <Setter Property="Foreground" Value="{DynamicResource SystemErrorTextColorBrush}" />
                            <Setter Property="Background" Value="{DynamicResource SystemErrorFillColorBrush}" />
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Appearance, RelativeSource={RelativeSource Self}}" Value="Primary" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource SystemAccentColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Appearance, RelativeSource={RelativeSource Self}}" Value="Info" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource SystemInfoTextColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Appearance, RelativeSource={RelativeSource Self}}" Value="Success" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource SystemSuccessTextColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Appearance, RelativeSource={RelativeSource Self}}" Value="Warning" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource SystemWarningTextColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Appearance, RelativeSource={RelativeSource Self}}" Value="Error" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource SystemErrorTextColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
                        </MultiDataTrigger>


                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Appearance, RelativeSource={RelativeSource Self}}" Value="Primary" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" Value="0.5" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Appearance, RelativeSource={RelativeSource Self}}" Value="Info" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" Value="0.5" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Appearance, RelativeSource={RelativeSource Self}}" Value="Success" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" Value="0.5" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Appearance, RelativeSource={RelativeSource Self}}" Value="Warning" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" Value="0.5" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Appearance, RelativeSource={RelativeSource Self}}" Value="Error" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" Value="0.5" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Appearance, RelativeSource={RelativeSource Self}}" Value="Custom" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" Value="0.5" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource ControlDisabledFillColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlDisableTextColorBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource DefaultTagStyle}" TargetType="{x:Type controls:Tag}" />

</ResourceDictionary>
