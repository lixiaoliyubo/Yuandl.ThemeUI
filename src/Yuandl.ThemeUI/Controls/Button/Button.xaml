<!--
    This Source Code Form is subject to the terms of the MIT License.
    If a copy of the MIT was not distributed with this file, You can obtain one at https://opensource.org/licenses/MIT.
    Copyright (C) Yuandl ThemeUI. All Rights Reserved.
-->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Yuandl.ThemeUI.Controls" 
    xmlns:assist="clr-namespace:Yuandl.ThemeUI.ElementAssist" 
    xmlns:converters="clr-namespace:Yuandl.ThemeUI.Converters">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Yuandl.ThemeUI;component/Resources/Shadows.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:BrushRoundConverter x:Key="BrushRoundConverter" />
    <Thickness x:Key="ButtonPadding">16,6,16,6</Thickness>
    <Thickness x:Key="ButtonBorderThemeThickness">1</Thickness>
    <Thickness x:Key="ButtonIconMargin">0,0,8,0</Thickness>
    <converters:ShadowConverter x:Key="ShadowConverter" />
    <converters:BorderClipConverter x:Key="BorderClipConverter" />
    <converters:ColorToStringConverter x:Key="ColorToStringConverter" />

    <Style x:Key="DefaultButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />
        <Setter Property="Background" Value="{DynamicResource ControlFillColorBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource ControlTextColorBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource ButtonBorderThemeThickness}" />
        <Setter Property="Padding" Value="{StaticResource ButtonPadding}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Border.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(assist:ShadowAssist.CacheMode)}">
                            <Border
                                x:Name="ContentBorder"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding Border.CornerRadius}"
                                Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(assist:ElevationAssist.Elevation), Converter={x:Static converters:ShadowConverter.Instance}}" 
                                >
                                <ContentPresenter
                                    x:Name="ContentPresenter" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    TextElement.Foreground="{TemplateBinding Foreground}" />
                            </Border>
                        </AdornerDecorator>
                        <controls:Ripple x:Name="Ripple" 
                            Focusable="False"
                            Feedback="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <controls:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="ContentBorder" Path="ActualWidth" />
                                    <Binding ElementName="ContentBorder" Path="ActualHeight" />
                                    <Binding ElementName="ContentBorder" Path="CornerRadius" />
                                    <Binding ElementName="ContentBorder" Path="BorderThickness" />
                                </MultiBinding>
                            </controls:Ripple.Clip>
                        </controls:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlHoverFillColorBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlHoverBorderColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlHoverTextColorBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource ControlDisabledFillColorBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlDisabledBorderColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlDisableTextColorBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlPressedFillColorBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlPressedBorderColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlPressedTextColorBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DefaultUiButtonStyle" TargetType="{x:Type controls:Button}">
        <!--  Universal WPF UI focus  -->
        <Setter Property="FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />
        <!--  Universal WPF UI focus  -->
        <Setter Property="Background" Value="{DynamicResource ControlFillColorBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource ControlTextColorBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource ButtonBorderThemeThickness}" />
        <Setter Property="Padding" Value="{StaticResource ButtonPadding}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="Appearance" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Button}">
                    <Grid>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(assist:ShadowAssist.CacheMode)}">
                            <Border 
                                x:Name="ContentBorder"
                                Padding="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="{TemplateBinding CornerRadius}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(assist:ElevationAssist.Elevation), Converter={x:Static converters:ShadowConverter.Instance}}" >
                                <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter
                                            x:Name="ControlIcon"
                                            Grid.Column="0"
                                            Margin="{StaticResource ButtonIconMargin}"
                                            VerticalAlignment="Center"
                                            Content="{TemplateBinding Icon}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                            Focusable="False"
                                            TextElement.FontSize="{TemplateBinding FontSize}"/>
                                    <ContentPresenter
                                            x:Name="ContentPresenter"
                                            Grid.Column="1"
                                            VerticalAlignment="Center"
                                            TextElement.FontSize="10"
                                            Content="{TemplateBinding Content}"/>
                                </Grid>
                            </Border>
                        </AdornerDecorator>
                        <controls:Ripple x:Name="Ripple" 
                            Focusable="False"
                            Feedback="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <controls:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="ContentBorder" Path="ActualWidth" />
                                    <Binding ElementName="ContentBorder" Path="ActualHeight" />
                                    <Binding ElementName="ContentBorder" Path="CornerRadius" />
                                    <Binding ElementName="ContentBorder" Path="BorderThickness" />
                                </MultiBinding>
                            </controls:Ripple.Clip>
                        </controls:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ControlHoverFillColorBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlHoverBorderColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlHoverTextColorBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ControlPressedFillColorBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlPressedBorderColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlPressedTextColorBrush}" />
                        </MultiTrigger>
                        <!--  TRANSPARENT  -->
                        <Trigger Property="Appearance" Value="Transparent">
                            <Setter Property="Background" Value="Transparent" />
                        </Trigger>
                        <!--  PRIMARY  -->
                        <Trigger Property="Appearance" Value="Primary">
                            <Setter Property="Background" Value="{DynamicResource SystemAccentColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
                        </Trigger>

                        <!--  DARK  -->
                        <Trigger Property="Appearance" Value="Warning">
                            <Setter Property="Background" Value="{DynamicResource SystemWarningTextColorBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
                        </Trigger>

                        <!--  INFO  -->
                        <Trigger Property="Appearance" Value="Info">
                            <Setter Property="Background" Value="{DynamicResource SystemInfoTextColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
                        </Trigger>

                        <!--  DANGER  -->
                        <Trigger Property="Appearance" Value="Error">
                            <Setter Property="Background" Value="{DynamicResource SystemErrorTextColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
                        </Trigger>

                        <!--  SUCCESS  -->
                        <Trigger Property="Appearance" Value="Success">
                            <Setter Property="Background" Value="{DynamicResource SystemSuccessTextColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource ControlDisabledFillColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlDisableTextColorBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlDisabledBorderColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlDisableTextColorBrush}" />
                        </Trigger>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="ControlIcon" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="Content" Value="">
                            <Setter TargetName="ControlIcon" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="ControlIcon" Property="Margin" Value="0" />
                            <Setter TargetName="ControlIcon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style BasedOn="{StaticResource DefaultButtonStyle}" TargetType="{x:Type Button}" />
    <Style BasedOn="{StaticResource DefaultUiButtonStyle}" TargetType="{x:Type controls:Button}" />

</ResourceDictionary>
