// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT was not distributed with this file, You can obtain one at https://opensource.org/licenses/MIT.
// Copyright(C) Yuandl ThemeUI. All Rights Reserved.
using System.Collections.Specialized;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Media.Media3D;

// ReSharper disable once CheckNamespace
namespace Yuandl.ThemeUI.Controls;

/// <summary>
/// A DataGrid control that displays data in rows and columns and allows
/// for the entering and editing of data.
/// </summary>
// [StyleTypedProperty(Property = nameof(CheckBoxColumnElementStyle), StyleTargetType = typeof(CheckBox))]
// [StyleTypedProperty(Property = nameof(CheckBoxColumnEditingElementStyle), StyleTargetType = typeof(CheckBox))]
public class DataGrid : System.Windows.Controls.DataGrid
{
    public static readonly DependencyProperty AutoGeneratedCheckBoxStyleProperty
    = DependencyProperty.RegisterAttached("AutoGeneratedCheckBoxStyle", typeof(Style), typeof(DataGrid),
        new PropertyMetadata(default(Style), AutoGeneratedCheckBoxStylePropertyChangedCallback));

    public Style? AutoGeneratedCheckBoxStyle
    {
        get => (Style?)GetValue(AutoGeneratedCheckBoxStyleProperty);
        set => SetValue(AutoGeneratedCheckBoxStyleProperty, value);
    }

    private static void AutoGeneratedCheckBoxStylePropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        var dataGrid = (DataGrid)d;

        dataGrid.AutoGeneratingColumn -= SetGeneratedCheckboxColumnStyle;
        dataGrid.AutoGeneratingColumn += SetGeneratedCheckboxColumnStyle;

        foreach (System.Windows.Controls.DataGridCheckBoxColumn column in dataGrid.Columns.OfType<System.Windows.Controls.DataGridCheckBoxColumn>())
        {
            ApplyColumnStyleForColumn(dataGrid, column);
        }
    }

    private static void SetGeneratedCheckboxColumnStyle(object? sender, DataGridAutoGeneratingColumnEventArgs e)
    {
        if (e.Column is System.Windows.Controls.DataGridCheckBoxColumn column &&
            sender is DataGrid dataGrid)
        {
            column.ElementStyle = dataGrid.AutoGeneratedCheckBoxStyle;
        }
    }

    public static readonly DependencyProperty AutoGeneratedEditingCheckBoxStyleProperty
        = DependencyProperty.RegisterAttached("AutoGeneratedEditingCheckBoxStyle", typeof(Style), typeof(DataGrid),
            new PropertyMetadata(default(Style), AutoGeneratedEditingCheckBoxStylePropertyChangedCallback));

    public Style? AutoGeneratedEditingCheckBoxStyle
    {
        get => (Style?)GetValue(AutoGeneratedEditingCheckBoxStyleProperty);
        set => SetValue(AutoGeneratedEditingCheckBoxStyleProperty, value);
    }

    private static void AutoGeneratedEditingCheckBoxStylePropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        var dataGrid = (DataGrid)d;

        dataGrid.AutoGeneratingColumn -= SetGeneratedCheckBoxEditingStyle;
        dataGrid.AutoGeneratingColumn += SetGeneratedCheckBoxEditingStyle;

        foreach (System.Windows.Controls.DataGridCheckBoxColumn column in dataGrid.Columns.OfType<System.Windows.Controls.DataGridCheckBoxColumn>())
        {
            ApplyColumnStyleForColumn(dataGrid, column);
        }
    }

    private static void SetGeneratedCheckBoxEditingStyle(object? sender, DataGridAutoGeneratingColumnEventArgs e)
    {
        if (e.Column is System.Windows.Controls.DataGridCheckBoxColumn column &&
            sender is DataGrid dataGrid)
        {
            column.EditingElementStyle = dataGrid.AutoGeneratedEditingCheckBoxStyle;
        }
    }

    public static readonly DependencyProperty AutoGeneratedTextStyleProperty
        = DependencyProperty.RegisterAttached("AutoGeneratedTextStyle", typeof(Style), typeof(DataGrid),
            new PropertyMetadata(default(Style), AutoGeneratedTextStylePropertyChangedCallback));

    public Style? AutoGeneratedTextStyle
    {
        get => (Style?)GetValue(AutoGeneratedTextStyleProperty);
        set => SetValue(AutoGeneratedTextStyleProperty, value);
    }

    private static void AutoGeneratedTextStylePropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        var dataGrid = (DataGrid)d;

        dataGrid.AutoGeneratingColumn -= SetGeneratedTextColumnStyle;
        dataGrid.AutoGeneratingColumn += SetGeneratedTextColumnStyle;

        foreach (DataGridColumn column in dataGrid.Columns.OfType<DataGridColumn>())
        {
            ApplyColumnStyleForColumn(dataGrid, column);
        }
    }

    private static void SetGeneratedTextColumnStyle(object? sender, DataGridAutoGeneratingColumnEventArgs e)
    {
        if (e.Column is System.Windows.Controls.DataGridTextColumn column &&
            sender is DataGrid dataGrid)
        {
            column.ElementStyle = dataGrid.AutoGeneratedTextStyle;
        }
    }

    public static readonly DependencyProperty AutoGeneratedEditingTextStyleProperty
        = DependencyProperty.RegisterAttached("AutoGeneratedEditingTextStyle", typeof(Style), typeof(DataGrid),
            new PropertyMetadata(default(Style), AutoGeneratedEditingTextStylePropertyChangedCallback));

    public Style? AutoGeneratedEditingTextStyle
    {
        get => (Style?)GetValue(AutoGeneratedEditingTextStyleProperty);
        set => SetValue(AutoGeneratedEditingTextStyleProperty, value);
    }

    private static void AutoGeneratedEditingTextStylePropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        var dataGrid = (DataGrid)d;

        dataGrid.AutoGeneratingColumn -= SetGeneratedTextColumnEditingStyle;
        dataGrid.AutoGeneratingColumn += SetGeneratedTextColumnEditingStyle;

        foreach (DataGridColumn column in dataGrid.Columns.OfType<DataGridColumn>())
        {
            ApplyColumnStyleForColumn(dataGrid, column);
        }
    }

    private static void SetGeneratedTextColumnEditingStyle(object? sender, DataGridAutoGeneratingColumnEventArgs e)
    {
        if (e.Column is System.Windows.Controls.DataGridTextColumn column &&
            sender is DataGrid dataGrid)
        {
            column.EditingElementStyle = dataGrid.AutoGeneratedEditingTextStyle;
        }
    }

    public static readonly DependencyProperty AutoGeneratedComboBoxStyleProperty
        = DependencyProperty.RegisterAttached("AutoGeneratedComboBoxStyle", typeof(Style), typeof(DataGrid),
            new PropertyMetadata(default(Style), AutoGeneratedComboBoxStylePropertyChangedCallback));

    public Style? AutoGeneratedComboBoxStyle
    {
        get => (Style?)GetValue(AutoGeneratedComboBoxStyleProperty);
        set => SetValue(AutoGeneratedComboBoxStyleProperty, value);
    }

    private static void AutoGeneratedComboBoxStylePropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        var dataGrid = (DataGrid)d;

        dataGrid.AutoGeneratingColumn -= SetGeneratedComboBoxColumnStyle;
        dataGrid.AutoGeneratingColumn += SetGeneratedComboBoxColumnStyle;

        foreach (DataGridComboBoxColumn column in dataGrid.Columns.OfType<DataGridComboBoxColumn>())
        {
            ApplyColumnStyleForColumn(dataGrid, column);
        }
    }

    private static void SetGeneratedComboBoxColumnStyle(object? sender, DataGridAutoGeneratingColumnEventArgs e)
    {
        if (e.Column is System.Windows.Controls.DataGridComboBoxColumn column &&
            sender is DataGrid dataGrid)
        {
            column.ElementStyle = dataGrid.AutoGeneratedComboBoxStyle;
        }
    }

    public static readonly DependencyProperty AutoGeneratedEditingComboBoxStyleProperty
        = DependencyProperty.RegisterAttached("AutoGeneratedEditingComboBoxStyle", typeof(Style), typeof(DataGrid),
            new PropertyMetadata(default(Style), AutoGeneratedEditingComboBoxStylePropertyChangedCallback));

    public Style? AutoGeneratedEditingComboBoxStyle
    {
        get => (Style?)GetValue(AutoGeneratedEditingComboBoxStyleProperty);
        set => SetValue(AutoGeneratedEditingComboBoxStyleProperty, value);
    }

    private static void AutoGeneratedEditingComboBoxStylePropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        var dataGrid = (DataGrid)d;

        dataGrid.AutoGeneratingColumn -= SetGeneratedComboBoxColumnEditingStyle;
        dataGrid.AutoGeneratingColumn += SetGeneratedComboBoxColumnEditingStyle;

        foreach (DataGridComboBoxColumn column in dataGrid.Columns.OfType<DataGridComboBoxColumn>())
        {
            ApplyColumnStyleForColumn(dataGrid, column);
        }
    }

    private static void SetGeneratedComboBoxColumnEditingStyle(object? sender, DataGridAutoGeneratingColumnEventArgs e)
    {
        if (e.Column is System.Windows.Controls.DataGridComboBoxColumn column &&
            sender is DataGrid dataGrid)
        {
            column.EditingElementStyle = dataGrid.AutoGeneratedEditingComboBoxStyle;
        }
    }

    public static readonly DependencyProperty ApplyColumnStylesProperty
        = DependencyProperty.RegisterAttached("ApplyColumnStyles", typeof(bool), typeof(DataGrid),
            new PropertyMetadata(default(bool), ApplyColumnStylesPropertyChangedCallback));

    public bool ApplyColumnStyles
    {
        get => (bool)GetValue(ApplyColumnStylesProperty);
        set => SetValue(ApplyColumnStylesProperty, value);
    }

    private static void ApplyColumnStylesPropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        var dataGrid = (DataGrid)d;
        dataGrid.Columns.CollectionChanged -= ColumnsCollectionChanged;
        if (Equals(true, e.NewValue))
        {
            dataGrid.Columns.CollectionChanged += ColumnsCollectionChanged;    // Auto-generated columns are added later in the chain, thus we subscribe to changes.
            foreach (DataGridColumn? column in dataGrid.Columns)
            {
                ApplyColumnStyleForColumn(dataGrid, column);
            }
        }

        void ColumnsCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
        {
            foreach (System.Windows.Controls.DataGridColumn column in e.NewItems?.OfType<System.Windows.Controls.DataGridColumn>() ?? Enumerable.Empty<System.Windows.Controls.DataGridColumn>())
            {
                ApplyColumnStyleForColumn(dataGrid, column);
            }
        }
    }

    public static readonly DependencyProperty EnableEditBoxAssistProperty
        = DependencyProperty.RegisterAttached("EnableEditBoxAssist", typeof(bool), typeof(DataGrid),
            new PropertyMetadata(default(bool), EnableEditBoxAssistPropertyChangedCallback));

    public bool EnableEditBoxAssist
    {
        get => (bool)GetValue(EnableEditBoxAssistProperty);
        set => SetValue(EnableEditBoxAssistProperty, value);
    }

    private static void EnableEditBoxAssistPropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        var dataGrid = (DataGrid)d;
        var enableCheckBoxAssist = (bool)e.NewValue;

        if (enableCheckBoxAssist)
        {
            // Register for bubbling events from cells, even when the cell handles them (thus the 'true' parameter)
            dataGrid.AddHandler(UIElement.MouseLeftButtonDownEvent, (RoutedEventHandler)OnMouseLeftButtonDown, true);
            dataGrid.PreviewKeyDown += EditOnSpacebarPress;
        }
        else
        {
            dataGrid.RemoveHandler(UIElement.MouseLeftButtonDownEvent, (RoutedEventHandler)OnMouseLeftButtonDown);
            dataGrid.PreviewKeyDown -= EditOnSpacebarPress;
        }
    }

    public static readonly DependencyProperty CellPaddingProperty
        = DependencyProperty.RegisterAttached("CellPadding", typeof(Thickness), typeof(DataGrid),
            new FrameworkPropertyMetadata(new Thickness(10, 5, 10, 5), FrameworkPropertyMetadataOptions.Inherits));

    public Thickness CellPadding
    {
        get => (Thickness)GetValue(CellPaddingProperty);
        set => SetValue(CellPaddingProperty, value);
    }

    public static readonly DependencyProperty SelectedCellBorderBrushProperty
        = DependencyProperty.RegisterAttached("SelectedCellBorderBrush", typeof(Brush), typeof(DataGrid),
            new PropertyMetadata(null));

    public Brush SelectedCellBorderBrush
    {
        get => (Brush)GetValue(SelectedCellBorderBrushProperty);
        set => SetValue(SelectedCellBorderBrushProperty, value);
    }

    public static readonly DependencyProperty ColumnHeaderPaddingProperty
        = DependencyProperty.RegisterAttached("ColumnHeaderPadding", typeof(Thickness), typeof(DataGrid),
            new FrameworkPropertyMetadata(new Thickness(10, 2, 10, 5), FrameworkPropertyMetadataOptions.Inherits));

    public Thickness ColumnHeaderPadding
    {
        get => (Thickness)GetValue(ColumnHeaderPaddingProperty);
        set => SetValue(ColumnHeaderPaddingProperty, value);
    }

    // This relay is only needed because the UIElement.AddHandler() has strict requirements for the signature of the passed Delegate
    private static void OnMouseLeftButtonDown(object sender, RoutedEventArgs e) => AllowDirectEditWithoutFocus(sender, (MouseButtonEventArgs)e);

    private static void ApplyColumnStyleForColumn(DataGrid dataGrid, System.Windows.Controls.DataGridColumn column)
    {
        Style defaultElementStyle = (Style)DataGridBoundColumn.ElementStyleProperty.GetMetadata(column.GetType()).DefaultValue;
        Style defaultEditingElementStyle = (Style)DataGridBoundColumn.EditingElementStyleProperty.GetMetadata(column.GetType()).DefaultValue;

        bool applyElementStyle;
        bool applyEditingElementStyle;
        switch (column)
        {
            case System.Windows.Controls.DataGridCheckBoxColumn checkBoxColumn:
                applyElementStyle = Equals(checkBoxColumn.ElementStyle, defaultElementStyle);
                applyEditingElementStyle = Equals(checkBoxColumn.EditingElementStyle, defaultEditingElementStyle);
                if (applyElementStyle && dataGrid.AutoGeneratedCheckBoxStyle is { } checkBoxElementStyle)
                {
                    checkBoxColumn.ElementStyle = checkBoxElementStyle;
                }

                if (applyEditingElementStyle && dataGrid.AutoGeneratedEditingCheckBoxStyle is { } checkBoxEditingElementStyle)
                {
                    checkBoxColumn.EditingElementStyle = checkBoxEditingElementStyle;
                }

                break;
            case System.Windows.Controls.DataGridTextColumn textColumn:
                applyElementStyle = Equals(textColumn.ElementStyle, defaultElementStyle);
                applyEditingElementStyle = Equals(textColumn.EditingElementStyle, defaultEditingElementStyle);
                if (applyElementStyle && dataGrid.AutoGeneratedTextStyle is { } textElementStyle)
                {
                    textColumn.ElementStyle = textElementStyle;
                }

                if (applyEditingElementStyle && dataGrid.AutoGeneratedEditingTextStyle is { } textEditingElementStyle)
                {
                    textColumn.EditingElementStyle = textEditingElementStyle;
                }

                break;
            case System.Windows.Controls.DataGridComboBoxColumn comboBoxColumn:
                applyElementStyle = Equals(comboBoxColumn.ElementStyle, defaultElementStyle);
                applyEditingElementStyle = Equals(comboBoxColumn.EditingElementStyle, defaultEditingElementStyle);
                if (applyElementStyle && dataGrid.AutoGeneratedComboBoxStyle is { } comboBoxElementStyle)
                {
                    comboBoxColumn.ElementStyle = comboBoxElementStyle;
                }

                if (applyEditingElementStyle && dataGrid.AutoGeneratedEditingComboBoxStyle is { } comboBoxEditingElementStyle)
                {
                    comboBoxColumn.EditingElementStyle = comboBoxEditingElementStyle;
                }

                break;
        }
    }

    private static void EditOnSpacebarPress(object sender, KeyEventArgs e)
    {
        var dataGrid = (DataGrid)sender;
        if (e.Key == Key.Space && e.OriginalSource is DataGridCell { IsReadOnly: false } cell)
        {
            if (cell.Column is System.Windows.Controls.DataGridComboBoxColumn ||
                cell.Column is System.Windows.Controls.DataGridTextColumn)
            {
                _ = dataGrid.BeginEdit();
                e.Handled = true;
            }
        }
    }

    /// <summary>
    /// Allows editing of components inside of a data grid cell with a single left click.
    /// </summary>
    private static void AllowDirectEditWithoutFocus(object sender, MouseButtonEventArgs mouseArgs)
    {
        var originalSource = (DependencyObject)mouseArgs.OriginalSource;

        DataGridCell? dataGridCell = GetVisualAncestry(originalSource)
            .OfType<DataGridCell>()
            .FirstOrDefault();

        // Readonly has to be handled as the pass-through ignores the
        // cell and interacts directly with the content
        if (dataGridCell?.IsReadOnly ?? true)
        {
            return;
        }

        if (dataGridCell.Content is UIElement element)
        {
            var dataGrid = (DataGrid)sender;

            // If it is a DataGridTemplateColumn we want the
            // click to be handled naturally by the control
            if (dataGridCell.Column.GetType() == typeof(DataGridTemplateColumn))
            {
                return;
            }

            if (dataGridCell.IsEditing)
            {
                // If the cell is already being edited, we don't want to (re)start editing
                return;
            }

            // NB: Issue 2852 - Don't handle events from nested data grids
            DataGrid? parentDataGrid = GetVisualAncestry(dataGridCell)
                .OfType<DataGrid>()
                .FirstOrDefault();
            if (parentDataGrid != dataGrid)
            {
                return;
            }

            dataGrid.CurrentCell = new DataGridCellInfo(dataGridCell);
            _ = dataGrid.BeginEdit();

            switch (dataGridCell.Content)
            {
                case TextBoxBase textBox:
                {
                    // Send a 'left-click' routed event to the TextBox to place the I-beam at the position of the mouse cursor
                    var mouseDownEvent = new MouseButtonEventArgs(mouseArgs.MouseDevice, mouseArgs.Timestamp, mouseArgs.ChangedButton)
                    {
                        RoutedEvent = Mouse.MouseDownEvent,
                        Source = mouseArgs.Source
                    };
                    textBox.RaiseEvent(mouseDownEvent);
                    break;
                }

                case ToggleButton toggleButton:
                {
                    // Check if the cursor actually hit the checkbox and not just the cell
                    Point mousePosition = mouseArgs.GetPosition(element);
                    var elementHitBox = new Rect(element.RenderSize);
                    if (elementHitBox.Contains(mousePosition))
                    {
                        // Send a 'left click' routed command to the toggleButton to toggle the state
                        var newMouseEvent = new MouseButtonEventArgs(mouseArgs.MouseDevice, mouseArgs.Timestamp, mouseArgs.ChangedButton)
                        {
                            RoutedEvent = Mouse.MouseDownEvent,
                            Source = dataGrid
                        };

                        toggleButton.RaiseEvent(newMouseEvent);
                    }

                    break;
                }

                // Open the dropdown explicitly. Left clicking is not
                // viable, as it would edit the text and not open the
                // dropdown
                case ComboBox comboBox:
                {
                    comboBox.IsDropDownOpen = true;
                    break;
                }
            }
        }
    }

    /// <summary>
    /// Returns full visual ancestry, starting at the leaf.
    /// <para>If element is not of <see cref="Visual"/> or <see cref="Visual3D"/> the
    /// logical ancestry is used.</para>
    /// </summary>
    /// <param name="leaf"></param>
    /// <returns></returns>
    public static IEnumerable<DependencyObject> GetVisualAncestry(DependencyObject? leaf)
    {
        while (leaf is not null)
        {
            yield return leaf;
            leaf = leaf is Visual || leaf is Visual3D
                ? VisualTreeHelper.GetParent(leaf)
                : LogicalTreeHelper.GetParent(leaf);
        }
    }
}